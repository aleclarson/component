// Generated by CoffeeScript 1.12.4
var AnimatedProps, Component, React, Type, mixin, requireNativeComponent, type;

AnimatedProps = require("Animated").AnimatedProps;

requireNativeComponent = require("requireNativeComponent");

React = require("react");

Type = require("Type");

Component = require("./Component");

type = Type("NativeComponent");

type.inherits(Component);

type.defineArgs([String]);

type.initInstance(function() {
  return mixin.apply(this);
});

type.overrideMethods({
  build: function() {
    var name, render;
    name = this._name;
    render = this._render || (function() {
      var componentType;
      componentType = requireNativeComponent(name);
      return function(props) {
        return React.createElement(componentType, props);
      };
    })();
    this._render = function() {
      var props;
      props = this._isMounting ? this._animatedProps.__getAllValues() : this._animatedProps.__getNonNativeValues();
      props.ref = this._setChild.bind(this);
      return render.call(this, props);
    };
    return this.__super(arguments);
  }
});

module.exports = type.build();

mixin = Component.Mixin();

mixin.defineValues(function() {
  return {
    _isMounting: false,
    _child: null,
    _queuedProps: null,
    _animatedProps: AnimatedProps(this.constructor.propTypes, this.setNativeProps.bind(this))
  };
});

mixin.willMount(function() {
  this._isMounting = true;
  this._animatedProps.attach(this.props);
});

mixin.didMount(function() {
  this._isMounting = false;
});

mixin.willReceiveProps(function(nextProps) {
  this._animatedProps.attach(nextProps);
});

mixin.willUnmount(function() {
  this._animatedProps.detach();
});

mixin.defineMethods({
  setNativeProps: function(newProps) {
    if (this._child === null) {
      this._queuedProps = newProps;
    } else {
      this._child.setNativeProps(newProps);
    }
  },
  _setChild: function(view) {
    if (view && this._queuedProps) {
      view.setNativeProps(this._queuedProps);
      this._queuedProps = null;
    }
    this._child = view;
    this._animatedProps.setAnimatedView(view);
  }
});
