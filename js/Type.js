// Generated by CoffeeScript 1.12.4
var Component, ElementType, NamedFunction, Type, ViewModelMixin, frozen, modx_Type, setKind, setType, sync;

frozen = require("Property").frozen;

NamedFunction = require("NamedFunction");

setKind = require("setKind");

setType = require("setType");

Type = require("Type");

sync = require("sync");

ElementType = require("./utils/ElementType");

Component = require("./Component");

modx_Type = NamedFunction("modx_Type", function(name) {
  var type;
  type = modx_Type.Builder(name);
  type.didBuild(function(type) {
    return setType(type, modx_Type);
  });
  return type;
});

module.exports = setKind(modx_Type, Type);

modx_Type.Builder = (function() {
  var type;
  type = Type("modx_TypeBuilder");
  type.inherits(Type.Builder);
  type.createValue("_componentType", function() {
    var name;
    name = this._name ? this._name + "_View" : null;
    type = Component(name);
    frozen.define(type, "_delegate", {
      value: this
    });
    return type;
  });
  type.initInstance((function() {
    var attachView, getters, willBuild;
    getters = {
      _delegate: function() {
        return this.props.delegate;
      }
    };
    attachView = function(props) {
      props.delegate._view = this;
    };
    willBuild = function() {
      if (this._kind instanceof modx_Type) {
        return;
      }
      ViewModelMixin.apply(this);
      this._componentType.defineGetters(getters);
      this._componentType.willBuild(function() {
        this._values.unshift(attachView);
      });
    };
    return function() {
      return this.willBuild(willBuild);
    };
  })());
  type.overrideMethods({
    __didInherit: function(kind) {
      if (kind instanceof modx_Type) {
        this._componentType.inherits(kind.render.componentType);
      }
    },
    __willBuild: function() {
      this.defineStatics({
        render: this._componentType.build()
      });
    }
  });
  type.willBuild(function() {
    var keys;
    keys = {
      "inheritProps": "inheritProps",
      "definePropDefaults": "definePropDefaults",
      "defineProps": "defineProps",
      "replaceProps": "replaceProps",
      "initProps": "initProps",
      "render": "render",
      "isRenderPrevented": "isRenderPrevented",
      "shouldUpdate": "shouldUpdate",
      "willReceiveProps": "willReceiveProps",
      "willMount": "willMount",
      "didMount": "didMount",
      "willUnmount": "willUnmount",
      "willUpdate": "willUpdate",
      "didUpdate": "didUpdate",
      "defineNativeValues": "defineNativeValues",
      "defineAnimatedValues": "defineAnimatedValues",
      "defineListeners": "defineListeners",
      "defineReactions": "defineReactions",
      "defineStyles": "defineStyles",
      "appendStyles": "appendStyles",
      "overrideStyles": "overrideStyles"
    };
    return this.definePrototype(sync.map(keys, function(key) {
      return {
        value: function(arg) {
          return this._componentType[key](arg);
        }
      };
    }));
  });
  return type.build();
})();

ViewModelMixin = (function() {
  var mixin;
  mixin = Component.Mixin();
  mixin.defineValues({
    _props: null,
    _view: null
  });
  mixin.defineGetters({
    props: function() {
      return this._props;
    },
    view: function() {
      return this._view;
    }
  });
  mixin.defineMethods({
    render: function(props) {
      return this.constructor.render(props, this);
    }
  });
  mixin.willUnmount(function() {
    this._props = null;
    this._view = null;
  });
  return mixin;
})();
