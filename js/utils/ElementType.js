// Generated by CoffeeScript 1.11.1
var ElementType, NamedFunction, ReactCurrentOwner, ReactElement, applyMixins, assertType, createType, isType, setKind, setType, steal;

ReactCurrentOwner = require("ReactCurrentOwner");

NamedFunction = require("NamedFunction");

ReactElement = require("ReactElement");

assertType = require("assertType");

setType = require("setType");

setKind = require("setKind");

isType = require("isType");

steal = require("steal");

ElementType = NamedFunction("ElementType", function(componentType) {
  var elementType;
  assertType(componentType, Function.Kind);
  elementType = createType(componentType);
  elementType.componentType = componentType;
  return setType(elementType, ElementType);
});

module.exports = setKind(ElementType, Function);

applyMixins = function(mixins, props) {
  var i, key, len, mixin, value;
  for (i = 0, len = mixins.length; i < len; i++) {
    mixin = mixins[i];
    if (mixin == null) {
      continue;
    }
    for (key in mixin) {
      value = mixin[key];
      if (props[key] === void 0) {
        props[key] = value;
      }
    }
  }
};

createType = function(componentType) {
  var createElement, initProps;
  initProps = componentType.initProps;
  return createElement = function(props, delegate) {
    var key, mixins, ref;
    if (props != null) {
      assertType(props, Object, "props");
    } else {
      props = {};
    }
    key = steal(props, "key", null);
    if (key !== null) {
      if (!isType(key, String)) {
        key = String(key);
      }
    }
    ref = steal(props, "ref", null);
    if (ref !== null) {
      assertType(ref, Function, "props.ref");
    }
    mixins = steal(props, "mixins", null);
    if (mixins !== null) {
      assertType(mixins, Array, "props.mixins");
      applyMixins(mixins, props);
    }
    if (initProps) {
      props = initProps(props);
    }
    if (delegate) {
      props.delegate = delegate;
    }
    return ReactElement.apply(null, [componentType, key, ref, null, null, ReactCurrentOwner.current, props]);
  };
};
