// Generated by CoffeeScript 1.11.1
var StylePresets, Type, assertType, assertTypes, createRgbaColor, hexToRgb, isDev, isType, propTypes, sync, type;

assertTypes = require("assertTypes");

assertType = require("assertType");

hexToRgb = require("hex-rgb");

isType = require("isType");

isDev = require("isDev");

Type = require("Type");

sync = require("sync");

type = Type("StylePresets");

type.defineValues(function() {
  return {
    _presets: Object.create(null)
  };
});

type.defineMethods({
  has: function(key) {
    return this._presets[key] !== void 0;
  },
  get: function(key) {
    return this._presets[key];
  },
  call: function(key, arg1) {
    var style;
    isDev && assertType(key, String);
    style = this._presets[key](arg1);
    if (isDev && !isType(style, Object)) {
      throw TypeError("Style presets must return an object!");
    }
    return style;
  },
  apply: function(style, key, arg1) {
    isDev && assertType(style, Object);
    return Object.assign(style, StylePresets.call(key, arg1));
  },
  define: function() {
    var args;
    args = arguments;
    isDev && assertType(args[0], String.or(Object));
    if (isType(args[0], String)) {
      return this._definePreset(args[0], args[1]);
    } else {
      return this._definePresets(args[0]);
    }
  },
  _definePreset: function(key, style) {
    isDev && assertType(style, Object.or(Function));
    if (isDev && this._presets[key]) {
      throw Error("Style preset already exists: '" + key + "'");
    }
    this._presets[key] = isType(style, Object) ? function() {
      return style;
    } : style;
  },
  _definePresets: function(presets) {
    var key, style;
    for (key in presets) {
      style = presets[key];
      this._definePreset(key, style);
    }
  }
});

module.exports = StylePresets = type.construct();

isDev && (propTypes = {
  border: {
    color: String,
    width: Number,
    opacity: Number.Maybe,
    radius: Number.Maybe
  }
});

StylePresets.define({
  clear: {
    backgroundColor: "transparent"
  },
  leftAlign: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "flex-start"
  },
  rightAlign: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "flex-end"
  },
  centerItems: {
    alignItems: "center",
    justifyContent: "center"
  },
  border: function(props) {
    var style;
    isDev && assertTypes(props, propTypes.border);
    style = {
      borderWidth: props.width,
      borderColor: props.opacity !== void 0 ? createRgbaColor(props.color, props.opacity) : props.color
    };
    if (props.radius !== void 0) {
      style.borderRadius = props.radius;
    }
    return style;
  },
  cover: function(enabled) {
    isDev && assertType(enabled, Boolean);
    if (enabled) {
      return {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      };
    } else {
      return {
        position: null,
        top: null,
        left: null,
        right: null,
        bottom: null
      };
    }
  },
  fill: function(enabled) {
    isDev && assertType(enabled, Boolean);
    if (enabled) {
      return {
        flex: 1,
        alignSelf: "stretch"
      };
    } else {
      return {
        flex: null,
        alignSelf: null
      };
    }
  },
  size: function(size) {
    isDev && assertType(size, Number);
    return {
      width: size,
      height: size
    };
  },
  diameter: function(size) {
    isDev && assertType(size, Number);
    return {
      width: size,
      height: size,
      borderRadius: size / 2
    };
  }
});

createRgbaColor = function(color, alpha) {
  var rgb;
  rgb = hexToRgb(color).join(", ");
  return "rgba(" + rgb + ", " + alpha + ")";
};
