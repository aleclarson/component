// Generated by CoffeeScript 1.12.4
var AnimatedValue, Mixin, Random, Reaction, animatedMixin, assertType, bind, captureMixin, defineReaction, defineReactions, emptyFunction, frozen, isDev, isType, rootMixin, sync;

AnimatedValue = require("Animated").AnimatedValue;

frozen = require("Property").frozen;

emptyFunction = require("emptyFunction");

assertType = require("assertType");

Reaction = require("Reaction");

Random = require("random");

isType = require("isType");

isDev = require("isDev");

bind = require("bind");

sync = require("sync");

Mixin = require("./Mixin");

module.exports = function(type) {
  return type.defineMethods({
    defineReactions: defineReactions
  });
};

defineReactions = function(reactions) {
  var delegate;
  isDev && assertType(reactions, Object.or(Function));
  delegate = this._delegate;
  if (delegate._needs("reactions")) {
    delegate.addMixin(rootMixin);
  }
  if (isType(reactions, Function)) {
    return delegate.addMixin(captureMixin, reactions);
  } else {
    return delegate.addMixin(animatedMixin, reactions);
  }
};

rootMixin = function(type) {
  return type.createValue("__reactions", function() {
    return Object.create(null);
  });
};

captureMixin = function(delegate, createReactions) {
  var id;
  id = Random.id();
  delegate.didMount(function() {
    var onInit, reactions;
    this.__reactions[id] = reactions = [];
    onInit = function(reaction) {
      return reactions.push(reaction.start());
    };
    onInit = Reaction.didInit(onInit);
    createReactions.apply(this, arguments);
    return onInit.detach();
  });
  delegate.willUnmount(function() {
    var i, len, reaction, ref;
    ref = this.__reactions[id];
    for (i = 0, len = ref.length; i < len; i++) {
      reaction = ref[i];
      reaction.stop();
    }
    return delete this.__reactions[id];
  });
};

animatedMixin = function(delegate, configs) {
  var id;
  id = Random.id();
  delegate._values.push(function() {
    var config, key, reaction, reactions;
    this.__reactions[id] = reactions = [];
    for (key in configs) {
      config = configs[key];
      reaction = defineReaction(this, key, config);
      reactions.push(reaction);
    }
  });
  delegate.willMount(function() {
    var i, len, reaction, reactions;
    reactions = this.__reactions[id];
    for (i = 0, len = reactions.length; i < len; i++) {
      reaction = reactions[i];
      reaction.start();
    }
  });
  delegate.willUnmount(function() {
    var i, len, reaction, reactions;
    reactions = this.__reactions[id];
    for (i = 0, len = reactions.length; i < len; i++) {
      reaction = reactions[i];
      reaction.stop();
    }
  });
};

defineReaction = function(obj, key, config) {
  var reaction, value;
  if (config == null) {
    return;
  }
  isDev && assertType(config, Function.or(Object));
  value = AnimatedValue(null);
  frozen.define(obj, key, {
    value: value
  });
  if (isType(config, Function)) {
    config = {
      get: bind.func(config, obj),
      didSet: function(newValue) {
        if (newValue !== value.get()) {
          return value._updateValue(newValue);
        }
      }
    };
  } else if (isType(config, Object)) {
    config.didSet = (function() {
      var didSet;
      didSet = config.didSet || emptyFunction;
      return function(newValue) {
        if (newValue !== value.get()) {
          value._updateValue(newValue);
          return didSet.call(obj, newValue);
        }
      };
    })();
  }
  reaction = Reaction(config);
  if (reaction.keyPath == null) {
    reaction.keyPath = obj.constructor.name + "." + key;
  }
  return reaction;
};
