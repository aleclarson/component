// Generated by CoffeeScript 1.12.4
var Mixin, assertType, createHook, gatedRender, hook, isRenderPrevented, mixin, mutable;

mutable = require("Property").mutable;

assertType = require("assertType");

Mixin = require("./Mixin");

module.exports = function(type) {
  return type.defineMethods({
    isRenderPrevented: isRenderPrevented
  });
};

isRenderPrevented = function(func) {
  var delegate;
  assertType(func, Function);
  if (this._isRenderPrevented) {
    throw Error("'isRenderPrevented' is already defined!");
  }
  mutable.define(this, "_isRenderPrevented", {
    value: func
  });
  delegate = this._delegate;
  delegate.defineMethods({
    isRenderPrevented: func
  });
  mixin.apply(delegate);
};

mixin = Mixin();

mixin.defineValues(function() {
  return {
    __needsRender: false
  };
});

mixin.defineReactions({
  __shouldRender: function() {
    return this.isRenderPrevented() === false;
  }
});

mixin.defineListeners(function() {
  return this.__shouldRender.didSet((function(_this) {
    return function(shouldRender) {
      if (shouldRender && _this.__needsRender) {
        _this.__needsRender = false;
        _this.view.forceUpdate();
      }
    };
  })(this));
});

mixin.willBuild(function() {
  return this.didBuild(function(type) {
    return hook(type.prototype, {
      __render: gatedRender,
      __shouldUpdate: gatedRender
    });
  });
});

hook = function(obj, methods) {
  var key, method;
  for (key in methods) {
    method = methods[key];
    mutable.define(obj, key, {
      value: createHook(method, obj[key])
    });
  }
};

createHook = function(method, orig) {
  return function() {
    return method.call(this, orig, arguments);
  };
};

gatedRender = function(orig, args) {
  if (this.__shouldRender.get()) {
    return orig.apply(this, args);
  }
  this.__needsRender = true;
  return null;
};
